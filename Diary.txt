this folder is for testing small parts of the project
# 0518
    Title:
        1. "Node" member function
        2. "Gate" member function
        3. "evaluate" function for every Gate
    Files:
        1. Gate header(folder)
        2. Gate source(folder)
        3. Node.cpp
        4. Node.h
    Problems:
        1. multi def of truth tables (V)
        2. forgot to write constructors for every Gate (V)
        3. need to use pointer to achive poly, change map<string,Gate> -> map<string,Gate*> (V)
        4. forgot to use call-by-reference(pointer) to update gate result,which made cashe fail (V)
    Solved: 
        1. write #ifndef
        2. (solved)
        3. (solved)
        4. fix container by using Node pointer
# 0519
    Title:
        1. fix 0518 Problems(4)
        2. create a header file called "allGate.h" for fast #include
        3. write class Parse for reading netlist
        4. write class Parse for reading pattern
        5. write a better testing program(node -> output -> gates -> value)
    Files:
        1. Parse(folder)
    Problems:
        1. change vector<Node*> into map<string,Node*> for easier access
    Solved:
        1.  
# 0524
    Title:
        1. realize what topological sorting is, then change all evaluate function
           from recursion to void which only set the value of the node
        2. topological solved the problem of stack overflow, and help find circuit cycles
        3. finish all I/O functions and the testing program is now better
        4. wrtie a Makefile and test in server
    Files:
        1. Patterns(folder)
        2. Netlists(folder)
        3. testcode.cpp(test.cpp has been deleted)
        4. main.cpp(testcode.cpp has been deleted)
        5. Makefile
    Problems:
        1. double delete when reading nodes that are in both InputNode and allNode
        2. Parser looks ugly
        3. deleting old nodes can cause problem
        4. constant become nullptr
        5. print blocks
    Solved:
        1. delete only one time is ok because the pointer is the same one
        2. ok fine
        3. nodeUpdate function is added(in Parser), set_out when a constructor is called(in Node.h)
        4. add 1b'1 and 1b'0 before ParseNetlist
        5. (not deleted yet!!!) <--- remember <--- 後來想想應該是不能刪(0601)
# 0601 (哦~痛苦)
    Title:
        1. 突然發現input format被改了，原本設計好的parser要重寫，他說會把node放在同一行宣告，甚至沒有空格，而且兩種都要讀的懂。
        2. 助教回應參考regular expression，但我完全不會用<regex>這個library，所以叫ChatGPT生成一個版本，然後再修正。
        3. 讀pattern的InputOrder也改了一下，怕又被搞。
        4. 順帶一提，新增了一個vector<string>來紀錄output的順序，阿不就還好有問。
        5. 為了Makefile方便寫，直接複製了之前lab的助教版本，所以把Parser這個folder刪掉了。所有.cpp都在src、.h在inc。
        6. 寫好了五個自己的測資 - 完成測試
            netlist1.v : example, 3 in, 2 out
            netlist2.v : loop, 3 in, 1 out
            netlist3.v : larger, 3 in, 2 out
            netlist4.v : multi-driven at node 'C', 2 in, 2 out
            netlist5.v : huge, 10 in, 4 out
    Files:
        1. Parser.cpp
        2. Parser.h
        3. main.cpp
    Problems:
        1. 不知道怎麼用<regex>
        2. 讀的時候都用getline，會忘記刪掉前面的換行符號
        3. 發現如果使用OuputOrder來紀錄的話根本不用原本的OutputNode
        4. 原本的版本是用>>讀第一階段的宣告，直到讀到不是"input", "output", "wire"，但這樣搞到第一個gate。
        5. 因為改成一開始直接宣告constant放進allNode，所以在TopoSort的地方刪掉了處理constant的block。
    Solved:
        1. 去學阿! regex split("\\s*,\\s*"); 甚至有iterator，真深奧
        2. s.erase(0, s.find_first_not_of(" \t\r\n"));  s.erase(s.find_last_not_of(" \t\r\n") + 1);
        3. 刪除OutputNode，改用OutputOrder的順序抓allNode
        4. 新增 if(str.find('(') == -1){
                   string rest;
                   getline(netlist_fin, rest);
                   str += rest;
                }  // 確保完整的宣告，因為可能只讀到gate_type 例如: xor (G0, a, b);
           讀gate用do-while，銜接前面先讀到的第一個gate，這樣子也不用重開檔案。
# Date
    Title:
        1. 
    Files:
        1. 
    Problems:
        1. 
    Solved:
        1.  